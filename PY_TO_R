library(reticulate)
np <- import("numpy")
lime <- import("lime.lime_tabular")
sp <- import("lime.submodular_pick")

# For LIME input: make sure we keep numeric format
X_train_np <- np$array(as.matrix(X_train))
X_test_np  <- np$array(as.matrix(X_test))

# Python predict function wrapper
py_predict <- function(x) {
  x_mat <- as.matrix(x)
  prob <- predict(model_xgb, newdata = x_mat, type = "prob")
  cbind(prob[, "0"], prob[, "1"])  # Class order: 0 then 1
}
explainer <- lime$LimeTabularExplainer(
  training_data = X_train_np,
  feature_names = colnames(X_train),
  class_names = c("0", "1"),
  discretize_continuous = TRUE,
  mode = "classification",
  random_state = 2025L
)

sp_obj <- sp$SubmodularPick(
  explainer = explainer,
  data = X_test_np,
  predict_fn = py_predict,
  sample_size = as.integer(nrow(X_test)),
  num_features = 10L,
  num_exps_desired = 10L
)
exp_df <- do.call(rbind, lapply(seq_along(sp_obj$explanations), function(i) {
  labels_available <- py_to_r(sp_obj$explanations[[i]]$available_labels())
  label_used <- labels_available[[1]]
  
  tryCatch({
    expl <- py_to_r(sp_obj$explanations[[i]]$as_list(label = label_used))
    data.frame(
      feature = sapply(expl, function(x) x[[1]]),
      weight = sapply(expl, function(x) x[[2]]),
      case = i,
      label = label_used,
      stringsAsFactors = FALSE
    )
  }, error = function(e) {
    NULL
  })
}))
library(ggplot2)

exp_df$label <- as.factor(exp_df$label)

top_features <- exp_df %>%
  group_by(feature, label) %>%
  summarise(mean_weight = mean(weight), .groups = "drop") %>%
  group_by(feature) %>%
  summarise(total_abs = sum(abs(mean_weight))) %>%
  slice_max(order_by = total_abs, n = 15) %>%
  pull(feature)

plot_df <- exp_df %>% filter(feature %in% top_features)

ggplot(plot_df, aes(x = reorder(feature, weight), y = weight, fill = label)) +
  geom_col(position = position_dodge()) +
  coord_flip() +
  labs(
    title = "SP-LIME Global Explanations (caret-trained XGBoost)",
    x = "Feature",
    y = "Mean LIME Weight",
    fill = "Predicted Class"
  ) +
  scale_fill_manual(values = c("#00BFFF", "#BA55D3")) +
  theme_minimal(base_size = 14)
